{"version":3,"sources":["char.d.ts","TextInput.tsx","Login.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","console","log","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listener","obj","args","listeners","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","TextInputAndButton","textInput","React","createRef","onClick","current","ref","buttonContent","Login","email","password","displayName","register","dnInput","src","width","alt","href","preventDefault","sendPacket","staySignedIn","ConversationCard","m","forceUpdate","removeAllEventListener","d","String","getFullYear","getMonth","getDate","lastMessage","length","selected","onSelect","name","convertToDate","Date","timeStamp","content","LeftPane","firstMessage","c","user","tag","text","sendContactRequest","map","key","selectedConversation","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9f916946.chunk.js","sourcesContent":["export interface MessageDto\n{\n    id: number;\n    timeStamp: string;\n    referenceTo: number; // 0: normal message, +: update, -: delete\n    senderId: string;\n    contentType: number;\n    content: string;\n}\n\nexport interface UserDto\n{\n    id: string;\n    displayName: string;\n    tag: string;\n    lastSeen: string;\n}\n\nexport interface ConversationDto\n{\n    channelId: string;\n    parentChannelId: string;\n    name: string;\n    description: string;\n    data: string;\n    state: number; // disconnected, outgoingRequest, incomingRequest, accepted, group\n    access: number; // none, read, write, admin\n    notificationLevel: number; // none, gray, push\n    unreadCount: number;\n    memberIds: string[];\n    lastMessages: MessageDto[];\n}\n\nexport interface InboxDto\n{\n    user: UserDto;\n    contacts: UserDto[];\n    conversations: ConversationDto[];\n}\n\nexport type OutgoingPacket =\n{ type: \"login\", email: string, password: string, staySignedIn: boolean } |\n{ type: \"loginWithToken\", token: string } |\n{ type: \"register\", email: string, password: string, displayName: string, staySignedIn: boolean } |\n{ type: \"contactRequest\", email: string, firstMessage: string } |\n{ type: \"message\", channelId: string, referenceTo: number, contentType: number, content: string };\n\n\nexport type IncomingPacket =\n{ type: \"error\", message: string } |\n{ type: \"login\", query: string, token: string, inbox: InboxDto } |\n{ type: \"message\", channelId: string, message: MessageDto } |\n{ type: \"conversationAdded\", conversation: ConversationDto } |\n{ type: \"conversationRemoved\", channelId: string } |\n{ type: \"user\", user: UserDto };\n\nexport class EventProducer\n{\n    private listeners: { type: string, listener, obj?: Object }[] = [];\n\n    addEventListener<K extends keyof M>( type: K, listener, obj?: Object )\n    {\n        this.listeners.push( { type, listener, obj } );\n    }\n    \n    protected dispatch( type: string, ...args )\n    {\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\n            listener.listener.call( listener.obj, ...args );\n    }\n\n    removeAllEventListener( obj: Object )\n    {\n        if ( !obj )\n            throw new Error( \"Must specify object\" );\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\n    }\n\n}\n\ninterface ProxyEventMap\n{\n    \"login\": () => void;\n    \"message\": ( channelId: string, message: MessageDto ) => void;\n    \"conversation\": ( channelId: string ) => void;\n}\n\nclass Proxy  extends EventProducer<ProxyEventMap>\n\n{\n    private ws: WebSocket;\n    constructor()\n    {\n        super()\n\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\n        \n        this.ws.addEventListener( \"open\", () =>\n        {\n            console.log(\"ws connection opened\");\n        } );\n        \n\n        this.ws.addEventListener( \"message\", e =>\n        {\n            let p = JSON.parse( e.data ) as IncomingPacket;\n            switch ( p.type )\n            {\n                case \"error\":\n                    alert( p.message );\n                    break;\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch(\"login\")\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\n                    this.dispatch( \"message\", cid, p.message );\n                    break;\n                case \"conversationAdded\":\n                    this.inbox!.conversations.push( p.conversation );\n                    this.dispatch( \"conversation\", p.conversation.channelId );\n                    break;\n            }\n        } );\n    }\n\n\n    sendPacket( packet: OutgoingPacket )\n    {\n        this.ws.send( JSON.stringify( packet ) );\n    }\n\n    inbox: InboxDto | null = null;\n\n\n    addEventListener<K extends keyof M>( type: K, listener, obj?: Object )\n    {\n        super.addEventListener(type, listener, obj);\n    }\n    \n    protected dispatch( type: string, ...args )\n    {\n        super.dispatch(type, args)\n    }\n\n    removeAllEventListener( obj: Object )\n    {\n        super.removeAllEventListener(obj);\n    }\n\n\n}\n\nexport var proxy = new Proxy();\n\n\n\n","import React, { Component } from 'react';\nimport './TextInput.css'\n\nexport interface TextInputAndButtonOptions\n{\n    value?: string;\n    onChange?: ( value: string ) => void;\n    type?: \"text\" | \"password\" | \"email\";\n    placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n    buttonContent?: string;\n    onClick?: ( text: string ) => boolean | void;\n};\n\nexport class TextInput extends Component<TextInputAndButtonOptions>\n{\n    state = { value: this.props.value, focus: false };\n\n    render()\n    {\n        let attrs = {} as any;\n        if ( this.props.autofocus )\n            attrs.autoFocus = true;\n    \n       if ( this.props.onEnter )\n            attrs.onKeyDown = e =>\n            {\n                if ( e.keyCode === 13 )\n                    this.props.onEnter!();\n            };\n\n        /*\n            had to change value={ this.state.value } to value={ this.props.value }\n            because the state was not updated from the props and I found no way to force it\n            to be updated, and the secret code functionality got lost\n        */\n\n        return (\n            <div className=\"text-input\">\n                <input { ...attrs } type={ this.props.type ?? \"text\" } value={ this.props.value }\n                    onChange={ e =>\n                    {\n                        this.setState( { value: e.target.value } );\n                        this.props.onChange?.( e.target.value );\n                    } }\n                onBlur={ () => this.setState( { focus: false } ) }\n                onFocus={ () => this.setState( { focus: true } ) } />\n                <div className=\"focus-indicator\"></div>\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\n                    { this.props.placeholder }\n                </label>\n            </div> );\n    }\n}\n\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\n{\n    textInput = React.createRef<TextInput>();\n\n    onClick()\n    {\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\n            this.textInput.current?.setState( { value: \"\" } );\n    }\n\n    render()\n    {\n        return (\n            <div className=\"text-input-and-button\">\n                <TextInput { ...this.props } ref={ this.textInput } onEnter={ () => this.onClick() } />\n                <button type=\"button\" onClick={ () => this.onClick() }>\n                    { this.props.buttonContent }\n                </button>\n            </div> );\n    }\n    \n}","import React, { Component } from 'react';\nimport { proxy } from './char.d'\nimport { TextInput } from './TextInput'\n\nexport class Login extends Component\n{\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\n\n    dnInput = React.createRef<TextInput>();\n\n    render()\n    {\n        return (\n        <div className=\"login\">\n            <img src=\"logo512.png\" width=\"256\" alt=\"\" />\n\n            <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\n                <a href=\"\" onClick={ e =>\n                    {\n                        e.preventDefault();\n                        this.setState( { register: !this.state.register } ); // pass a function instead of object\n                    } }>\n                { this.state.register ? \"Login\" : \"Register\" }\n                </a>\n            </p>\n\n\n            <TextInput\n                type=\"email\"\n                placeholder=\"Email (someone@example.com)\"\n                value={ this.state.email }\n\n                onChange={ e => {\n                    this.setState( { email: e } );\n                    if(e === \"t0tw47\")\n                        this.setState( { displayName: \"Nagy Roland\" } );\n                    else\n                        this.setState( { displayName: this.state.displayName } );\n\n                } }\n\n                onEnter={ () => this.onClick() }\n                autofocus={ true } />\n\n            <TextInput\n                type=\"password\"\n                placeholder=\"Password\"\n                value={ this.state.password }\n                onChange={ e => this.setState( { password: e } ) }\n                onEnter={ () => this.onClick() }\n                autofocus={ true } />\n\n            { this.state.register &&\n            <TextInput\n                type=\"text\"\n                ref={ this.dnInput }\n                placeholder=\"Display Name (Agent Smith)\"\n                value={ this.state.displayName }\n                onChange={ e => this.setState( { displayName: e } ) }\n                onEnter={ () => this.onClick() }\n                autofocus={ true } /> }\n\n\n            <button type=\"button\" onClick={ () => this.onClick() }>Login</button>\n\n            <br/>\n            <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n        </div> );\n    }\n\n    \n    onClick()\n    {\n        if ( this.state.register )\n            proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password,\n            displayName: this.state.displayName, staySignedIn: false } );\n        else\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password,\n            staySignedIn: false } );\n    }\n}\n","import React, { Component } from 'react';\nimport { ConversationDto, proxy } from './char.d'\n\nexport class ConversationCard extends Component<{\n        conversation: ConversationDto,\n        selected: boolean,\n        onSelect: () => void\n        }>\n    {\n\n    componentDidMount()\n    {\n        proxy.addEventListener( \"message\", ( cid, m ) =>\n            {\n                if ( cid === this.props.conversation.channelId )\n                    this.forceUpdate();\n            }, this );\n    }\n    \n    componentWillUnmount()\n    {    \n        proxy.removeAllEventListener( this );\n    }\n\n    convertToDate(d: Date)\n    {\n        const year = String(d.getFullYear());\n        let month = String(d.getMonth() + 1);\n        let day = String(d.getDate());\n      \n        return year + \"-\" + month + \"-\" + day;\n    }\n\n    render()\n    {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\n\n        this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\n\n        return (\n            <div className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\n            onClick={ () => this.props.onSelect() }>\n                <div className=\"row\">\n                    <span className=\"channel-name\">{ this.props.conversation.name }</span>\n                    <span className=\"time\">\n                    { lastMessage && this.convertToDate(new Date( lastMessage.timeStamp )) }\n                    </span>\n                </div>\n                <span className=\"last-message\">{ lastMessage?.content }</span>\n            </div> );\n        }\n    }\n    ","import React, { Component } from 'react';\nimport { ConversationDto, InboxDto, proxy } from './char.d'\nimport { TextInputAndButton } from './TextInput'\nimport { ConversationCard } from './ConversationCard'\n\nexport class LeftPane extends Component<{\n        inbox: InboxDto,\n        selectedConversation: ConversationDto | undefined,\n        onSelect: ( c: ConversationDto ) => void,\n        style?: string\n    }>\n    {\n\n    sendContactRequest( email: string )\n    {\n        proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\n        return true;\n    }\n\n    componentDidMount()\n    {\n        proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\n    }\n    componentWillUnmount()\n    {\n        proxy.removeAllEventListener( this );\n    }\n\n    render()\n    {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\n\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={ text => this.sendContactRequest( text ) } />\n        \n                <div className=\"conversations\">\n                    { this.props.inbox.conversations.map( x =>\n                    <ConversationCard\n                        key={ x.channelId }\n                        conversation={ x }\n                        selected={ x === this.props.selectedConversation }\n                        onSelect={ () => this.props.onSelect( x ) } /> ) }\n                </div>\n            </div> );\n    }\n}\n    ","import React, { PureComponent } from 'react';\nimport { MessageDto } from './char.d'\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\n{\n    render()\n    {\n        return (\n        <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\n            <div className=\"bubble\">\n                <span className=\"text\">{ this.props.message.content }</span>\n                    <span className=\"time\">\n                    { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\n                </span>\n            </div>\n        </div> );\n    }\n}\n","import React, { Component } from 'react';\nimport { proxy, ConversationDto } from './char.d'\n\nimport { TextInputAndButton } from './TextInput'\nimport { MessageCard } from './MessageCard';\n\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\n{\n    componentDidMount()\n    {\n        proxy.addEventListener( \"message\", ( cid, m ) =>\n        {\n            if ( cid === this.props.conversation?.channelId )\n                this.forceUpdate();\n        }, this );\n    }\n\n    componentWillUnmount()\n    {\n        proxy.removeAllEventListener( this );\n    }\n\n    onSend( text: string )\n    {\n        proxy.sendPacket( { type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\n        , contentType: 0, content: text } );\n        \n        return true;\n    }\n\n    render()\n    {\n        // \"border-left-width: 0px;\"\n        return (\n        <div className=\"right-pane column only-narrow-no-border\">\n            { this.props.conversation &&\n            <>\n            <div className=\"conversation-header\">\n                <p>{ this.props.conversation?.name }</p>\n            </div>\n            <div className=\"conversation-header row\">\n                <button type=\"button\" className=\"only-narrow\"\n                onClick={ () => this.props.onBack() }>Back</button>\n                <p>{ this.props.conversation?.name }</p>\n            </div>\n\n            <div className=\"messages\">\n                { this.props.conversation?.lastMessages.map( x =>\n                <MessageCard key={ x.id } message={ x }\n                own={ x.senderId === proxy.inbox?.user.id } /> ) }\n            </div>\n            \n            <div className=\"send-message row\">\n                <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                buttonContent=\"Send\" onClick={ x => this.onSend( \"T: \" + x ) } />\n            </div>\n            </>\n            }\n        </div> );\n    }\n\n\n}\n\n","import React, { Component } from 'react';\nimport { ConversationDto, proxy } from './char.d'\n\nimport { LeftPane } from './LeftPane';\nimport { RightPane } from './RightPane';\n\n\nexport class Main extends Component\n{\n    state = { selectedConversation: undefined as ( ConversationDto | undefined ) };\n\n    render()\n    {\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\n\n        return (\n            <div className={ className }>\n                <LeftPane\n                    inbox={ proxy.inbox! }\n                    selectedConversation={ this.state.selectedConversation }\n                    onSelect={ c => this.setState( { selectedConversation: c } ) }\n                />\n        \n                <RightPane conversation={ this.state.selectedConversation }\n                    onBack={ () => this.setState( { selectedConversation: undefined } ) }\n                />\n            </div>);\n    }\n}\n","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport { Main } from './Main'\nimport { proxy } from './char.d';\n\n\nexport default class App extends Component\n{\n  state = { showLogin: true };\n\n  componentDidMount()\n  {\n    proxy.addEventListener( \"login\", () => this.setState( { showLogin: false } ) );\n  }\n\n  render()\n  {\n    return (\n        <div className=\"app\">\n          { this.state.showLogin ? <Login /> : <Main /> }\n        </div>\n      );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}